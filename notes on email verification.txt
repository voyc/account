
Screen-grab of Chase.com
	see also the email itself

Check your email Your information is securely transmitted via https (S S L) 128-bit Encryption - An email is on its way with your temporary Identification Code. Once you receive your code, enter it below with the Password you use to log in and click "Next."

En español: Ayuda para introducir el Código de identificación
 
 
    *Required field
   	
Enter your Identification Code

   
 
1.

 	
Enter your temporary Identification Code
      

Haven't received your Identification Code? 
We email Identification Codes immediately, but many factors may influence how fast you receive them. Please check your spam folder to determine if it was delivered there. If you need access immediately please select another delivery option by clicking "Request a new Identification Code" below.

Request a new Identification Code.
 	
2.
Log in Password *
      
Note: Enter the same Password you use to log in.
 
=======================

chase.com
close window and reopen, not logged in
open second window, not logged in 	
refresh browser, still logged in
this is all with "remember me" NOT checked

=======================

another dialog called "Verify Email"

link to it appears in user profile dropdown
temporary identification code is demanded on login

after login, if user not active
	verify dialog appears:

after register,
	verify dialog appears
		temporary identification code (paste)
		password
		btns: Verify/Later
	if the user clicks the link in the email
	the dialog disappears
		because he has been checking with the server in the background

verify-complete
Thank you for verifying your email address.
		

=======================

Method 1.
	Like Chase Bank.
	User has already entered email/password.
	Now in the Verify dialog, he enters Temporary Identification Code and password.
	Pros:
		all handled in one browser window
	Cons:
		user may have to wait for email
		user has to cut and paste between windows
	Mitigation:
		let the user continue working while waiting for the email
		keep the code small and easier to re-type if the user cannot do cut-and-paste
	UI:
		verify dialog: takes TIC and password, btns: Verify/Later
		link to verify dialog from user-options dropdown
		prompt 'thank you' after verify complete
		check with every putcards, whether access-level has changed
	
Method 2.
	Click link in email.
	Nota Bene:
		Hash code in email must be more secure, because email/password are not required.
		The hash takes us straight to the user record, just like a cookie.
	Pros:
		easy for user to click the link
	Cons:
		user can easily get two windows open simultaneously
	Mitigation:
		make sure simultaneous open windows does not break anything
		give him his "success" message in a stripped-down window 
			that encourages him to return to his original window
	UI:
		Thank you page has link to redirect to index.html


In both cases, Method 1 and 2				

	access level al=a/l/v
		0: anonymous
		1: logged-in - registered and has token
		2: verified

	At level 1
		display Verify prompt after login
		allow operation if user clicks "later"

	putcards
		receive access-level
		return access-level

	program
		when access-level changes, remove Verify link from user-options dropdown


				
=======================

Consider all these implications again,
after going through change-email and reset-password

=======================

Eliminate Two Window Conflicts

	the two windows share a session id

	Flush to db (call putcards) before/during/after registration and verify.

	what things will get out of sync
		nSession
		highseq

Implications.
	If the user has a session id cookie,
		then if he refreshes his browser, 
		or closes and reopens his window,
		or opens as second window,
			he is still in the same session.

=======================

todo
	change username
	change password
	resend verification email - (button on verify form?)
	change email - with verification?
	reset password - with verification

	
	
	
	When a user changes his email, does he need to verify?  
		NO.
		The verification identifies him as a human who owns the email.
		If he were to change the email to one he did not control, 
			why would he do that?
			It could only be a mistake,
			Or he is passing his account off to someone else.  Pointless.
		But we could send an email to both old and new, informational only.
			This would also help him discover a typo in his change request.
			Since it's his login, if he types it wrong, he can no longer log in.

	Consider, 
		don't save data for a user until he has verified his email.
		Even if he has registered?
		He registered, is waiting on the email, goes to lunch, refreshes browser, screwed.
		Fuck him.
		No data saving until human-verified.
		Why do this?
			Assuring human user.  Avoiding DOS attacks.
			putcards is more db and cpu intensive than other operations.

			
			
Limit the number of updates passed on a putcards.

			