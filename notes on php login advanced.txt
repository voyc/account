Hello,
Thank you for posting this code.

I see you are using two different techniques for generating a unique key.

1.	hash('sha256', mt_rand());
	For rememberme cookie.  Length 64.
		
2.	sha1(uniqid(mt_rand(), true));
	For email verification for register and reset-password.  Length 40.

Is there some reason for the two different techniques?
Thanks
John
	
				
function newRememberMeCookie
  line 393           $random_token_string = hash('sha256', mt_rand());

            if ($hash == hash('sha256', $user_id . ':' . $token . COOKIE_SECRET_KEY) && !empty($token)) {
  
            if ($hash == hash('sha256', $user_id . ':' . $token . COOKIE_SECRET_KEY) && !empty($token)) {
 
            $cookie_string_first_part = $_SESSION['user_id'] . ':' . $random_token_string;
            $cookie_string_hash = hash('sha256', $cookie_string_first_part . COOKIE_SECRET_KEY);
            $cookie_string = $cookie_string_first_part . ':' . $cookie_string_hash;
 
 
1. use hash() to generate a unique key, store in user record
	$random_token_string = hash('sha256', mt_rand());

2. prefix with userid:
  $cookie_string_first_part = $_SESSION['user_id'] . ':' . $random_token_string;

3. concatenate with secret key and run hash()
	$cookie_string_hash = hash('sha256', $cookie_string_first_part . COOKIE_SECRET_KEY);

4. userid:token:hash  where hash is userid:token.secretkey hashed
	$cookie_string = $cookie_string_first_part . ':' . $cookie_string_hash;

cookie = userid:token:hash
	where hash = hash(userid:token:secretkey)
Warning!  Sending database table key to the client.


-------------------

function setPasswordResetDatabaseTokenAndSendMail
Line 617	
                // generate random hash for email password reset verification (40 char string)
                $user_password_reset_hash = sha1(uniqid(mt_rand(), true));
